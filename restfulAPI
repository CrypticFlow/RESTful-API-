// jshint esversion:6
//require the packages
const express = require("express");
const bodyParser = require("body-parser");
const ejs = require("ejs");
const mongoose = require("mongoose");

//initialize express
const app = express();

//intialize ejs templating
app.set('view engine', 'ejs');

//bodyParser for each of data requests
app.use(bodyParser.urlencoded({extended: true}));

//make sure static content like images and css files are in the PUBLIC directories.
app.use(express.static("public"));

//connect to the mongodb server
mongoose.connect("mongodb://localhost:27017/WikiDB", {useNewUrlParser: true});

//initialize a schema constant.
const articleSchema = {
  title: String,
  content: String,
};

//declare the new content in the schema constant
const Article = mongoose.model("Article", articleSchema);

////////////////////////// Route Targeting ALL Articles ////////////////////////

app.route("/articles")
.get(function(req, res){
  Article.find(function(err, foundArticles){
    if(!err){
      res.send(foundArticles);
    } else {
      res.send(err);
    }
  });
})
.post(function(req, res){
  const newArticle = new Article({
    title: req.body.title,
    content: req.body.content
  });
  newArticle.save(function(err){
      if(!err){
        res.send("Successfully added a new Article.");
      } else {
        res.send(err);
      }
  });
})
.delete(function(req,res){
  Article.deleteMany(function(err){
    if(!err){
      res.send("Successfully deleted all articles");
    } else {
      res.send(err);
    }
  });
});

///////////////////////////// Route targeting a SPECIFIC Article // /////////////////////

app.route("/articles/:articleTitle")
.get(function(req,res){
  Article.findOne({title: req.params.articleTitle}, function(err,foundArticle){
    if (foundArticle) {
      res.send(foundArticles);
    } else {
      res.send("No Articles Match that Title");
    }
  });
})
.put(function(req,res){
  Article.update(
    {title: req.params.articleTitle},
    {title: req.body.title, content: req.body.content},
    {overwrite: true},
    function(err){
      if(!err){
        res.send("Successfully updated article!");
      }
    }
  );
})
.patch(function(req,res){
  req.body = {
    title: "TEST",
    content: "TEST"
  }
  Article.update(
    {title: req.params.articleTitle},
    {$set: req.body},
    function(err){
      if(!err){
        res.send("Successfully updated article!");
      }
    }
  );
})
.delete(function(req,res){
  Article.deleteOne(
    {title: req.params.articleTitle},
    function(err){
      if(!err){
        res.send("Successfully deleted the corresponding article!");
      } else {
        res.send(err);
      }
    }
  );
});

//server is listening on port 8080
app.listen(8080,function(){
  console.log("Server started on port 8080");
});
